<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE
    html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<title>Shlomif.org - shlomif_tech community beta</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
div.entry
{
    border: darkgreen solid medium;
    padding: 0.5em;
    margin: 0.5em;
}
a:hover { background-color: palegreen; }
</style>

</head>
<body>


<div class="entry" id="cython-report-and-tips">

<h2>Cython: Report and Tips</h2>

<p>
<a href="https://en.wikipedia.org/wiki/Cython">Cython</a> allows one to
compile code written using a superset of the
<a href="https://en.wikipedia.org/wiki/Python_(programming_language)">Python
programming language</a> into C code for improved performance. I recently tried
it in an attempt to speed up <a href="https://github.com/shlomif/project-euler/tree/master/project-euler/598">my solution to a Project Euler problem</a>,
which was ran slowly even by pypy. After some amount of work, the cython-based
solution outperformed the pure-Python code, without me having to reimplement
it all in C or C++ or similar. SoÂ you should consider using it if you need
the extra performance as well.
</p>
<!--

Summary:
* cdef int i; for i in xrange(0, mymax); does not optimize.
** cdef int i; for i in range(mymax); does.
* Inspect the .c file to see the resultant C code.
* cdef int arr[100][100] vs. cdef int [100] * ptr
* Delay messing with the C types only right before the time-critical code.
** Initialize from dyna-typed python data structures.
* one can apply better optimisation flags.
* cdef cannot be used inside loops/etc.
-->

</div>

</body>
<!-- vim: set indentexpr=:   -->
</html>
